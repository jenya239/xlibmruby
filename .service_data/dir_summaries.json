{
  "src/core": {
    "hash": "2ee802976bb66f5d9ec90e234de86d0f90c921b8d9cba9109b4c85a4e209c40f",
    "summary": "Директория \"src/core\" содержит класс `Container` в файле `container.hpp`, который предоставляет функционал для регистрации и разрешения синглтонов. Класс содержит методы `register_singleton` и `resolve`, использует фабричные функции для создания синглтонов и генерирует исключение при отсутствии зарегистрированного сервиса. Файл `container.cpp` содержит пустую реализацию, так как методы шаблонные и определены в заголовочном файле."
  },
  "src/interfaces": {
    "hash": "e19697f036cca95b954aebb7a53811d86d588a396c7ebcfd6eba57081d98fc77",
    "summary": "Директория \"src/interfaces\" содержит интерфейсы для работы с различными сервисами. В ней находятся следующие файлы:\n1. `iruby_service.hpp`:\n   - Интерфейс `IRubyService` с методами:\n     - `execute_code()`: чисто виртуальная функция для выполнения кода.\n     - `load_file()`: чисто виртуальная функция для загрузки файла.\n   \n2. `iwindow_service.hpp`:\n   - Интерфейс `IWindowService` с методом:\n     - `run()`: абстрактный метод без реализации, предназначенный для запуска окна."
  },
  "src": {
    "hash": "cbd2a2ccb17d090b7f4f7ae6ece04b0a5deccabf9cb9b3a1775153ae16767987",
    "summary": "Директория \"src\" содержит основной исходный код приложения. В файле `main.cpp` определена функция `main`, которая создает объект `Container`, использует метод `configure` класса `AppModule` для настройки контейнера, получает сервис окон из контейнера и запускает его. В случае возникновения исключения выводится сообщение об ошибке."
  },
  "src/modules": {
    "hash": "77d7fadd9cedd4fb6aaee8a1bba8334565499d56fcd1635fc060b36d35ac9af6",
    "summary": "Директория \"src/modules\" содержит модуль `AppModule`, в котором реализован метод `configure`. В этом методе происходит регистрация синглтонов `IRubyService` и `IWindowService` в контейнере. Создаются экземпляры `RubyService` и `WindowService`, последний из которых получает экземпляр `IRubyService`. Затем создаются и устанавливаются два объекта `Label` для отображения ввода и результата на окне."
  },
  "src/services": {
    "hash": "79bcfc2a2e90c9de52d73838bcf5e2bb3a554885c6eafb7c22a8b044dcacf7da",
    "summary": "Директория \"src/services\" содержит два файла: `ruby_service.cpp` и `window_service.cpp`. \n\n1. В файле `ruby_service.cpp`:\n   - Класс `RubyService` предоставляет функциональность выполнения Ruby-кода.\n   - Конструктор и деструктор инициализируют и закрывают интерпретатор mruby.\n   - Метод `execute_code` выполняет переданный код и возвращает результат выполнения.\n   - Метод `load_file` загружает код из файла и возвращает результат выполнения.\n   - Метод `handle_error` обрабатывает ошибки и возвращает сообщение об ошибке.\n\n2. В файле `window_service.cpp`:\n   - Класс `WindowService` управляет окном X11.\n   - Конструктор инициализирует окно, графический контекст и Xft.\n   - Метод `run` загружает Ruby-скрипт и запускает главный цикл.\n   - Методы `redraw` и `handle_key_press` обновляют содержимое окна в ответ на события.\n   - Метод `draw_at_pointer` рисует текст \"hi!\" по координатам указателя.\n   - Методы `setInputLabel` и `setResultLabel` устанавливают метки и регистрируют их как виджеты.\n\nОба класса, `RubyService` и `WindowService`, реализуют соответствующие интерфейсы и предоставляют методы для выполнения кода на Ruby и управления окном X11 соответственно."
  },
  "src/gui": {
    "hash": "c0edbd3b6e9e643855cf731690db742f9ea8d95fd0df1755d14bff2389bdf69a",
    "summary": "Директория \"src/gui\" содержит файлы, связанные с графическим интерфейсом. Основные элементы кода в этой директории:\n\n1. `BufferedComponent` (класс):\n   - Конструктор создает буферный pixmap с помощью `XCreatePixmap`.\n   - Метод `draw` отрисовывает содержимое буфера на drawable.\n   - Метод `invalidateBuffer` устанавливает флаг для перерисовки.\n   - Освобождение памяти в деструкторе с помощью `XFreePixmap`.\n\n2. `Label` (класс):\n   - Наследуется от `BufferedComponent` и представляет надпись.\n   - Конструктор инициализирует параметры надписи, загружает шрифт и выделяет цвет.\n   - Метод `drawOnBuffer` очищает буфер и рисует текст с заданным шрифтом и цветом.\n\n3. `VisibleComponent` (класс):\n   - Представляет видимый компонент интерфейса.\n   - Конструктор инициализирует параметры компонента.\n   - Виртуальный метод `draw` отвечает за отрисовку компонента на drawable.\n\nДиректория содержит классы для работы с графическим интерфейсом, включая компоненты с буферизацией и отображением текста."
  }
}