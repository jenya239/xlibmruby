{
  "src/core": {
    "hash": "2ee802976bb66f5d9ec90e234de86d0f90c921b8d9cba9109b4c85a4e209c40f",
    "summary": "Директория \"src/core\" содержит класс `Container` в файле `container.hpp`, который предоставляет функционал для регистрации и разрешения синглтонов. Класс содержит методы `register_singleton` и `resolve`, использует фабричные функции для создания синглтонов и генерирует исключение при отсутствии зарегистрированного сервиса. Файл `container.cpp` содержит пустую реализацию, так как методы шаблонные и определены в заголовочном файле."
  },
  "src/interfaces": {
    "hash": "e19697f036cca95b954aebb7a53811d86d588a396c7ebcfd6eba57081d98fc77",
    "summary": "Директория \"src/interfaces\" содержит интерфейсы для работы с различными сервисами. В ней находятся следующие файлы:\n1. `iruby_service.hpp`:\n   - Интерфейс `IRubyService` с методами:\n     - `execute_code()`: чисто виртуальная функция для выполнения кода.\n     - `load_file()`: чисто виртуальная функция для загрузки файла.\n   \n2. `iwindow_service.hpp`:\n   - Интерфейс `IWindowService` с методом:\n     - `run()`: абстрактный метод без реализации, предназначенный для запуска окна."
  },
  "src": {
    "hash": "cbd2a2ccb17d090b7f4f7ae6ece04b0a5deccabf9cb9b3a1775153ae16767987",
    "summary": "Директория \"src\" содержит основной исходный код приложения. В файле `main.cpp` определена функция `main`, которая создает объект `Container`, использует метод `configure` класса `AppModule` для настройки контейнера, получает сервис окон из контейнера и запускает его. В случае возникновения исключения выводится сообщение об ошибке."
  },
  "src/modules": {
    "hash": "a306b459431fa06f8ecc82604683b699b1375f6b0c7cd7d0aab4e6f49c4f38b1",
    "summary": "Директория \"src/modules\" содержит модуль \"AppModule\", в котором определен класс AppModule. В файле `app_module.cpp` реализован метод `configure`, который регистрирует синглтоны IRubyService и IWindowService в контейнере. IRubyService создается с помощью RubyService, а IWindowService — с использованием WindowService и IRubyService из контейнера. Файл `app_module.hpp` содержит объявление класса `AppModule` с методом `configure`."
  },
  "src/services": {
    "hash": "06f9442de9151dd786d68a166a21e6dd9af02ed09cd3a329fa90fd01d17ffd2c",
    "summary": "Директория \"src/services\" содержит два файла:\n\n1. `ruby_service.cpp` и `ruby_service.hpp`:\n   - Класс `RubyService` предоставляет функциональность выполнения Ruby-кода.\n   - Инициализация и закрытие интерпретатора mruby происходят в конструкторе и деструкторе.\n   - Метод `execute_code` выполняет переданный код, обрабатывает ошибки и возвращает результат.\n   - Метод `load_file` загружает код из файла и возвращает результат выполнения.\n   - Метод `handle_error` обрабатывает ошибки и возвращает сообщение об ошибке.\n\n2. `window_service.cpp` и `window_service.hpp`:\n   - Класс `WindowService` управляет окном X11.\n   - В конструкторе инициализируется дисплей, создается окно, настраивается графический контекст и устанавливаются обработчики событий.\n   - Метод `run` загружает Ruby-скрипт и запускает цикл обработки событий.\n   - Методы `create_window` и `setup_gc` создают окно и настраивают графический контекст.\n   - Метод `main_loop` обрабатывает события Expose, KeyPress, ButtonPress, MotionNotify и MappingNotify.\n   - Методы `redraw`, `handle_key_press` и `draw_at_pointer` отвечают за перерисовку окна, обработку нажатий клавиш и рисование текста по координатам указателя мыши."
  }
}