Проект представляет собой приложение, использующее паттерн Dependency Injection для управления сервисами. Основные компоненты:

1. **Container** (src/core/container.hpp, container.cpp):
   - Класс `Container` для регистрации и разрешения синглтонов.
   - Методы `register_singleton` и `resolve`.
   - Использует фабричные функции для создания синглтонов.

2. **Интерфейсы** (src/interfaces):
   - `IRubyService` с методами `execute_code()` и `load_file()`.
   - `IWindowService` с методом `run()`.

3. **AppModule** (src/modules/app_module.hpp, app_module.cpp):
   - Класс `AppModule` для настройки контейнера.
   - Метод `configure` регистрирует IRubyService и IWindowService в контейнере.

4. **Сервисы** (src/services):
   - `RubyService` для выполнения Ruby-кода.
     - Методы `execute_code`, `load_file`, `handle_error`.
   - `WindowService` для управления окном X11.
     - Методы `run`, `create_window`, `setup_gc`, `main_loop`, `redraw`, `handle_key_press`, `draw_at_pointer`.

5. **main.cpp**:
   - Функция `main` создает объект `Container`, настраивает контейнер через `AppModule`, получает и запускает сервис окон.

Проект использует шаблон Dependency Injection для управления зависимостями и обеспечения гибкости приложения.