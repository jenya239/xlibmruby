---- core/container.cpp ----
#include "core/container.hpp"
// Empty implementation file as all methods are templated in header

---- core/container.hpp ----
#pragma once
#include <unordered_map>
#include <functional>
#include <memory>
#include <typeindex>
#include <any>
#include <stdexcept>
#include <string>

class Container {
public:
    template<typename T>
    void register_singleton(std::function<std::shared_ptr<T>()> factory) {
        services[std::type_index(typeid(T))] = [factory]() -> std::any {
            return factory();
        };
    }

    template<typename T>
    std::shared_ptr<T> resolve() {
        auto it = services.find(std::type_index(typeid(T)));
        if (it != services.end()) {
            return std::any_cast<std::shared_ptr<T>>(it->second());
        }
        throw std::runtime_error(std::string("Service not registered: ") + typeid(T).name());
    }

private:
    std::unordered_map<std::type_index, std::function<std::any()>> services;
};

---- gui/label.cpp ----
#include "label.hpp"
#include <X11/Xft/Xft.h>
#include <stdexcept>
#include <iostream>

Label::Label(Display* display,
             Window window,
             GC gc, // Добавлен параметр GC
             int x,
             int y,
             int width,
             int height,
             const std::string& text,
             const std::string& fontName,
             const std::string& colorStr)
    : VisibleComponent(display, window, gc, width, height), // Передача GC
      x_(x),
      y_(y),
      text_(text),
      font_(nullptr, XftFontDeleter{ display })
{
    int screen = DefaultScreen(display);

    // Load font using Xft with RAII
    XftFont* raw_font = XftFontOpenName(display, screen, fontName.c_str());
    if (!raw_font) {
        throw std::runtime_error("Failed to load font: " + fontName);
    }
    font_.reset(raw_font);
    std::cout << "Loaded font: " << fontName << std::endl;

    // Allocate color using Xft
    if (!XftColorAllocName(display,
                           DefaultVisual(display, screen),
                           DefaultColormap(display, screen),
                           colorStr.c_str(),
                           &color_))
    {
        std::cerr << "Failed to allocate color: " << colorStr << std::endl;
        throw std::runtime_error("Failed to allocate color: " + colorStr);
    }
    std::cout << "Allocated color: " << colorStr << std::endl;
}

Label::~Label() {
    int screen = DefaultScreen(display_);
    XftColorFree(display_,
                DefaultVisual(display_, screen),
                DefaultColormap(display_, screen),
                &color_);
    std::cout << "Freed color resources for Label." << std::endl;
    // XftFont is automatically closed by unique_ptr
}

void Label::draw(Drawable drawable) {
    int screen = DefaultScreen(display_);

    XftDrawPtr xftDraw(XftDrawCreate(display_,
                                     drawable, // Используем переданный drawable
                                     DefaultVisual(display_, screen),
                                     DefaultColormap(display_, screen)),
                       XftDrawDeleter());

    if (!xftDraw) {
        std::cerr << "Failed to create XftDraw in Label::draw." << std::endl;
        return;
    }

    XftDrawStringUtf8(xftDraw.get(),
                      &color_,
                      font_.get(),
                      x_,
                      y_,
                      reinterpret_cast<const FcChar8*>(text_.c_str()),
                      static_cast<int>(text_.size()));
    std::cout << "Drawing label text: " << text_ << std::endl;
}

void Label::handleEvent(XEvent& event) {
}

---- gui/label.hpp ----
#pragma once

#include "visible_component.hpp"
#include <string>
#include <X11/Xft/Xft.h>
#include <memory>
#include "../utils/x11_raii.hpp"

class Label : public VisibleComponent {
public:
    Label(Display* display,
          Window window,
          GC gc, // Добавлен параметр GC
          int x,
          int y,
          int width,
          int height,
          const std::string& text,
          const std::string& fontName = "monospace-10",
          const std::string& colorStr = "#000000");

    ~Label() override;

    void draw(Drawable drawable) override;
    void handleEvent(XEvent& event) override;

    void setText(const std::string& text) { text_ = text; }
    const std::string& getText() const { return text_; }

private:
    int x_, y_;
    std::string text_;

    // RAII for XftFont
    struct XftFontDeleter {
        Display* display;
        void operator()(XftFont* f) const {
            if (f) XftFontClose(display, f);
        }
    };
    std::unique_ptr<XftFont, XftFontDeleter> font_;

    XftColor color_;
};

---- gui/visible_component.hpp ----
#pragma once
#include <X11/Xlib.h>

class VisibleComponent {
public:
    VisibleComponent(Display* display, Window window, GC gc, int width, int height)
        : display_(display), window_(window), gc_(gc), width_(width), height_(height) {}
    virtual ~VisibleComponent() = default;

    // Draw on the given Drawable (e.g., Pixmap or Window)
    virtual void draw(Drawable drawable) = 0;
    virtual void handleEvent(XEvent& event) = 0;

protected:
    Display* display_;
    Window window_;
    GC gc_;
    int width_, height_;
};

---- interfaces/iruby_service.hpp ----
#pragma once
#include <string>

class IRubyService {
public:
    virtual ~IRubyService() = default;
    virtual std::string execute_code(const std::string& code) = 0;
    virtual std::string load_file(const std::string& filename) = 0;
};

---- interfaces/iwindow_service.hpp ----
#pragma once

class IWindowService {
public:
	virtual ~IWindowService() = default;
	virtual void run() = 0;
};

---- main.cpp ----
#include "core/container.hpp"
#include "modules/app_module.hpp"
#include "interfaces/iwindow_service.hpp"
#include <iostream>

int main() {
    try {
        Container container;
        AppModule::configure(container);
        std::cout << "Application configured." << std::endl;
        
        auto window_service = container.resolve<IWindowService>();
        std::cout << "Resolved IWindowService." << std::endl;
        window_service->run();
        std::cout << "Application run completed." << std::endl;
        
        return 0;
    } catch (const std::exception& e) {
        std::cerr << "Error in main: " << e.what() << std::endl;
        return 1;
    }
}

---- modules/app_module.cpp ----
#include "app_module.hpp"
#include "../services/ruby_service.hpp"
#include "../services/window_service.hpp"
#include "../gui/label.hpp"
#include <memory>
#include <iostream>

void AppModule::configure(Container& container) {
    container.register_singleton<IRubyService>([]() {
        std::cout << "Registering IRubyService." << std::endl;
        return std::make_shared<RubyService>();
    });

    container.register_singleton<IWindowService>([&container]() {
        std::cout << "Registering IWindowService." << std::endl;
        auto ws = std::make_shared<WindowService>(container.resolve<IRubyService>());

        auto input = std::make_unique<Label>(ws->getDisplay(), ws->getWindow(),
                                            ws->getGC(), // Передача GC
                                            10, 30, 300, 20,
                                            "Введите код Ruby...", "monospace-10", "#004400");
        ws->setInputLabel(std::move(input));

        auto result = std::make_unique<Label>(ws->getDisplay(), ws->getWindow(),
                                             ws->getGC(), // Передача GC
                                             10, 60, 300, 20,
                                             "Результат", "monospace-10", "#004400");
        ws->setResultLabel(std::move(result));

        auto test_lbl = std::make_unique<Label>(ws->getDisplay(), ws->getWindow(),
                                               ws->getGC(), // Передача GC
                                               100, 90, 300, 20,
                                               "test", "Times New Roman-16", "#994400");
        ws->addWidget(std::move(test_lbl));

        std::cout << "WindowService configured with labels." << std::endl;
        return ws;
    });
}

---- modules/app_module.hpp ----
#pragma once
#include "../core/container.hpp"

class AppModule {
public:
    static void configure(Container& container);
};

---- services/ruby_service.cpp ----
#include "ruby_service.hpp"
#include <mruby/compile.h>
#include <mruby/string.h>
#include <stdexcept>
#include <iostream>
#include <fstream>
#include <sstream>

RubyService::RubyService() : mrb(mrb_open()) {
    if (!mrb) {
        std::cerr << "Failed to initialize mruby." << std::endl;
        throw std::runtime_error("Failed to initialize mruby");
    }
    std::cout << "mruby initialized." << std::endl;
}

RubyService::~RubyService() {
    if (mrb) {
        mrb_close(mrb);
        std::cout << "mruby closed." << std::endl;
    }
}

std::string RubyService::execute_code(const std::string& code) {
    std::cout << "Executing Ruby code: " << code << std::endl;
    mrb_value result = mrb_load_string(mrb, code.c_str());
    if (mrb->exc) {
        auto error = handle_error();
        mrb->exc = NULL;
        std::cerr << "Ruby Execution Error: " << error << std::endl;
        return "Error: " + error;
    }
    std::cout << "Ruby code executed successfully." << std::endl;
    return mrb_str_to_cstr(mrb, mrb_funcall(mrb, result, "inspect", 0));
}

std::string RubyService::load_file(const std::string& filename) {
    std::cout << "Loading Ruby file: " << filename << std::endl;
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Failed to open Ruby file: " << filename << std::endl;
        throw std::runtime_error("Failed to open " + filename);
    }
    std::stringstream buffer;
    buffer << file.rdbuf();
    file.close();
    std::cout << "Ruby file loaded successfully." << std::endl;
    return execute_code(buffer.str());
}

std::string RubyService::handle_error() {
    mrb_value exc = mrb_obj_value(mrb->exc);
    mrb_value msg = mrb_funcall(mrb, exc, "inspect", 0);
    return mrb_str_to_cstr(mrb, msg);
}

---- services/ruby_service.hpp ----
#pragma once
#include "../interfaces/iruby_service.hpp"
#include <mruby.h>

class RubyService : public IRubyService {
public:
    RubyService();
    ~RubyService() override;

    std::string execute_code(const std::string& code) override;
    std::string load_file(const std::string& filename) override;

private:
    mrb_state* mrb; // Assuming you have a typedef or using statement
    std::string handle_error();
};

---- services/window_service.cpp ----
#include "window_service.hpp"
#include <X11/Xutil.h>
#include <X11/Xft/Xft.h>
#include <stdexcept>
#include <iostream>
#include <cstring>

// Конструктор
WindowService::WindowService(std::shared_ptr<IRubyService> ruby_service) 
    : ruby_service(std::move(ruby_service)),
      display(XOpenDisplay(""), DisplayDeleter()),
      screen(DefaultScreen(display.get())),
      text_buffer(256, '\0'),
      text_length(0)
{
    if (!display) {
        std::cerr << "Failed to open display." << std::endl;
        throw std::runtime_error("Failed to open display");
    }

    create_window();
    setup_gc();
    setup_xft();

    // Выбор событий ввода
    XSelectInput(display.get(), window, 
                ButtonPressMask | KeyPressMask | ExposureMask | PointerMotionMask | ButtonReleaseMask);
    XMapRaised(display.get(), window);
    std::cout << "Window created and mapped." << std::endl;
}

// Деструктор
WindowService::~WindowService() {
    // Разрушение XftDraw
    if (draw) {
        XftDrawDestroy(draw.release());
        std::cout << "Destroyed XftDraw." << std::endl;
    }

    // Освобождение XftColor
    XftColorFree(display.get(), visual, colormap, &color_);
    std::cout << "Freed XftColor." << std::endl;

    // Закрытие XftFont
    if (font_) {
        XftFontClose(display.get(), font_);
        std::cout << "Closed XftFont." << std::endl;
    }

    // Display закрывается уникальным указателем
    // Виджеты автоматически разрушаются уникальными указателями
    std::cout << "WindowService destroyed." << std::endl;
}

void WindowService::create_window() {
    XSizeHints hints = {};
    hints.x = 200;
    hints.y = 300;
    hints.width = 350;
    hints.height = 250;
    hints.flags = PPosition | PSize;

    window = XCreateSimpleWindow(display.get(), 
                                 DefaultRootWindow(display.get()),
                                 hints.x, hints.y, hints.width, hints.height,
                                 5,
                                 BlackPixel(display.get(), screen),
                                 WhitePixel(display.get(), screen));

    XSetStandardProperties(display.get(), window, "X11 Window2", "X11 Window2",
                           None, nullptr, 0, &hints);
    std::cout << "Simple window created." << std::endl;
}

void WindowService::setup_gc() {
    gc = XCreateGC(display.get(), window, 0, nullptr);
    XSetBackground(display.get(), gc, WhitePixel(display.get(), screen));
    XSetForeground(display.get(), gc, BlackPixel(display.get(), screen));
    std::cout << "Graphics Context (GC) set up." << std::endl;
}

void WindowService::setup_xft() {
    visual = DefaultVisual(display.get(), screen);
    colormap = DefaultColormap(display.get(), screen);
    font_ = XftFontOpenName(display.get(), screen, "monospace-10");
    if (!font_) {
        std::cerr << "Failed to load XftFont." << std::endl;
        throw std::runtime_error("Failed to load font");
    }
    std::cout << "Loaded XftFont: monospace-10" << std::endl;

    // Allocate color using Xft
    if (!XftColorAllocName(display.get(), visual, colormap, "black", &color_)) {
        std::cerr << "Failed to allocate XftColor." << std::endl;
        XftFontClose(display.get(), font_);
        throw std::runtime_error("Failed to allocate color");
    }
    std::cout << "Allocated XftColor: black" << std::endl;

    // Create XftDraw using RAII
    XftDraw* raw_xftDraw = XftDrawCreate(display.get(), window, visual, colormap);
    if (!raw_xftDraw) {
        std::cerr << "Failed to create XftDraw." << std::endl;
        XftColorFree(display.get(), visual, colormap, &color_);
        XftFontClose(display.get(), font_);
        throw std::runtime_error("Failed to create XftDraw");
    }
    draw = XftDrawPtr(raw_xftDraw, XftDrawDeleter());
    std::cout << "Created XftDraw." << std::endl;
}

void WindowService::run() {
    try {
        std::string ruby_output = ruby_service->load_file("scripts/hello.rb");
        std::cout << "Loaded Ruby script: scripts/hello.rb" << std::endl;
        main_loop(ruby_output);
    } catch (const std::exception& e) {
        std::cerr << "Error during run: " << e.what() << std::endl;
    }
}

void WindowService::setInputLabel(std::unique_ptr<Label> label) {
    inputLabel = label.get(); // Устанавливаем указатель
    addWidget(std::move(label)); // Перемещаем владение в widgets
    std::cout << "Input label set." << std::endl;
}

void WindowService::setResultLabel(std::unique_ptr<Label> label) {
    resultLabel = label.get(); // Устанавливаем указатель
    addWidget(std::move(label)); // Перемещаем владение в widgets
    std::cout << "Result label set." << std::endl;
}

void WindowService::addWidget(std::unique_ptr<VisibleComponent> widget) {
    widgets.emplace_back(std::move(widget));
    std::cout << "Widget added to WindowService." << std::endl;
}

void WindowService::main_loop(std::string& ruby_output) {
    bool done = false;
    while (!done) {
        XEvent event;
        XNextEvent(display.get(), &event);

        for (const auto& widget : widgets) {
            widget->handleEvent(event);
        }

        switch (event.type) {
            case Expose:
                if (event.xexpose.count == 0) {
                    std::cout << "Expose event: Redrawing window." << std::endl;
                    redraw(ruby_output);
                }
                break;
            case KeyPress:
                std::cout << "KeyPress event received." << std::endl;
                done = handle_key_press(event, ruby_output);
                break;
            case ButtonPress:
            case MotionNotify:
                // Опционально: реализовать взаимодействие с указателем
                break;
            case MappingNotify:
                XRefreshKeyboardMapping(&event.xmapping);
                break;
            default:
                break;
        }
    }
    std::cout << "Exiting main loop." << std::endl;
}

void WindowService::redraw(const std::string& ruby_output) {
    if (inputLabel) {
        inputLabel->setText(text_buffer.substr(0, text_length));
        std::cout << "Updated inputLabel text: " << inputLabel->getText() << std::endl;
    }
    if (resultLabel) {
        resultLabel->setText(ruby_output);
        std::cout << "Updated resultLabel text: " << resultLabel->getText() << std::endl;
    }

    int win_width = 350;
    int win_height = 250;

    // Создание оффскрин Pixmap с использованием RAII
    PixmapHolder buffer(display.get(), window, win_width, win_height, DefaultDepth(display.get(), screen));
    std::cout << "Created offscreen Pixmap." << std::endl;

    // Заполнение фона
    XSetForeground(display.get(), gc, WhitePixel(display.get(), screen));
    XFillRectangle(display.get(), buffer.get(), gc, 0, 0, win_width, win_height);
    std::cout << "Filled background with white." << std::endl;

    // Рисование всех виджетов
    for (const auto& widget : widgets) {
        widget->draw(buffer.get());
    }
    std::cout << "All widgets drawn to Pixmap." << std::endl;

    // Копирование буфера в окно
    XCopyArea(display.get(), buffer.get(), window, gc, 0, 0, win_width, win_height, 0, 0);
    XFlush(display.get());
    std::cout << "Copied Pixmap to window and flushed display." << std::endl;
}

bool WindowService::handle_key_press(XEvent& event, std::string& ruby_output) {
    char buf[32] = {0};
    KeySym key;
    int len = XLookupString(&event.xkey, buf, sizeof(buf), &key, nullptr);

    if (len > 0) {
        std::cout << "KeyPress: KeySym=" << key << ", KeyString=" << buf << std::endl;

        if (key == XK_q) {
            std::cout << "Pressed 'q'. Exiting application." << std::endl;
            return true; // Выйти из основного цикла
        }
        if (key == XK_BackSpace && text_length > 0) {
            text_buffer[--text_length] = '\0';
            std::cout << "Pressed BackSpace. New text_length: " << text_length << std::endl;
        }
        else if (key == XK_Return) {
            std::cout << "Pressed Enter. Executing Ruby code." << std::endl;
            std::string code = text_buffer.substr(0, text_length);
            ruby_output = ruby_service->execute_code(code);
            std::cout << "Ruby execution output: " << ruby_output << std::endl;
        }
        else {
            if (static_cast<size_t>(text_length) + len < text_buffer.size()) {
                std::memcpy(&text_buffer[text_length], buf, len);
                text_length += len;
                text_buffer[text_length] = '\0';
                std::cout << "Updated text_buffer: " << text_buffer.substr(0, text_length) << std::endl;
            } else {
                std::cerr << "Warning: Text buffer overflow. Cannot append more characters." << std::endl;
            }
        }
        redraw(ruby_output);
    }
    return false; // Не выходить
}

void WindowService::draw_at_pointer(const XEvent& event) {
    // Реализовать при необходимости
    std::cout << "draw_at_pointer called." << std::endl;
}

---- services/window_service.hpp ----
#pragma once
#include "interfaces/iwindow_service.hpp"
#include "interfaces/iruby_service.hpp"
#include <X11/Xlib.h>
#include <X11/Xft/Xft.h>
#include <memory>
#include <string>
#include <vector>
#include "../gui/visible_component.hpp"
#include "../gui/label.hpp" // For using Label
#include "../utils/x11_raii.hpp"

struct DisplayDeleter {
    void operator()(Display* d) const { 
        if (d) XCloseDisplay(d); 
    }
};

class WindowService : public IWindowService {
public:
    WindowService(std::shared_ptr<IRubyService> ruby_service);
    ~WindowService() override;
    void run() override;

    Display* getDisplay() const { return display.get(); }
    Window getWindow() const { return window; }
    GC getGC() const { return gc; } // Добавленный метод

    // Методы для установки меток
    void setInputLabel(std::unique_ptr<Label> label);
    void setResultLabel(std::unique_ptr<Label> label);

    // Метод для добавления виджетов
    void addWidget(std::unique_ptr<VisibleComponent> widget);

private:
    std::shared_ptr<IRubyService> ruby_service;
    std::unique_ptr<Display, DisplayDeleter> display;
    Window window;
    GC gc;
    int screen;
    std::string text_buffer;
    size_t text_length;

    Visual* visual;
    Colormap colormap;
    XftFont* font_;
    XftColor color_;
    XftDrawPtr draw;

    // Контейнер для виджетов, управляемых через unique_ptr
    std::vector<std::unique_ptr<VisibleComponent>> widgets;

    // Указатели на метки
    Label* inputLabel = nullptr;
    Label* resultLabel = nullptr;

    void create_window();
    void setup_gc();
    void setup_xft();
    void main_loop(std::string& ruby_output);
    void redraw(const std::string& ruby_output);
    bool handle_key_press(XEvent& event, std::string& ruby_output);
    void draw_at_pointer(const XEvent& event);
};

---- utils/x11_raii.hpp ----
#pragma once
#include <X11/Xlib.h>
#include <X11/Xft/Xft.h>
#include <memory>
#include <stdexcept>

// RAII Wrapper for Pixmap
class PixmapHolder {
public:
    PixmapHolder(Display* d, Window w, unsigned int width, unsigned int height, unsigned int depth)
        : display_(d), pixmap_(XCreatePixmap(d, w, width, height, depth))
    {
        if (pixmap_ == None) {
            throw std::runtime_error("Failed to create Pixmap");
        }
    }

    ~PixmapHolder() {
        if (pixmap_ != None) {
            XFreePixmap(display_, pixmap_);
        }
    }

    Pixmap get() const { return pixmap_; }

    // Disable copy
    PixmapHolder(const PixmapHolder&) = delete;
    PixmapHolder& operator=(const PixmapHolder&) = delete;

private:
    Display* display_;
    Pixmap pixmap_;
};

// RAII Wrapper for XftDraw
struct XftDrawDeleter {
    void operator()(XftDraw* draw) const {
        if (draw) {
            XftDrawDestroy(draw);
        }
    }
};

using XftDrawPtr = std::unique_ptr<XftDraw, XftDrawDeleter>;

// RAII Wrapper for XftColor
struct XftColorDeleter {
    Display* display;
    Visual* visual;
    Colormap colormap;

    void operator()(XftColor* color) const {
        if (color) {
            XftColorFree(display, visual, colormap, color);
            delete color;
        }
    }
};

using XftColorPtr = std::unique_ptr<XftColor, XftColorDeleter>;

